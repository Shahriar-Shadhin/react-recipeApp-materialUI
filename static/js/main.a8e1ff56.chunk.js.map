{"version":3,"sources":["logo.svg","Recipe.jsx","App.js","reportWebVitals.js","index.js"],"names":["useStyles","makeStyles","root","width","marginBottom","backgroundColor","borderRadius","padding","media","height","marginLeft","marginRight","paddingTop","headerstyle","color","orange","Recipe","title","calories","image","ingredients","classes","Card","className","CardHeader","subheader","Math","round","CardMedia","CardContent","Typography","variant","map","ingredient","text","random","theme","margin","spacing","App","useState","recipes","setRecipes","search","setSearch","query","setQuery","useEffect","getRecipes","Request","a","fetch","response","json","data","hits","Grid","container","direction","alignContent","alignItems","justify","onSubmit","e","preventDefault","item","TextField","type","id","label","value","onChange","target","Button","recipe","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a8e1ff56.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React from 'react'\r\nimport Card from '@material-ui/core/Card';\r\nimport CardHeader from '@material-ui/core/CardHeader';\r\nimport CardMedia from '@material-ui/core/CardMedia';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n// import Box from '@material-ui/core/Box';\r\n// import Avatar from '@material-ui/core/Avatar';\r\n// import IconButton from '@material-ui/core/IconButton';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { orange } from '@material-ui/core/colors';\r\n// import { green, grey, red } from '@material-ui/core/colors/';\r\n// import { List } from '@material-ui/core';\r\n\r\n\r\n\r\nconst useStyles = makeStyles(() => ({\r\n    root: {\r\n        width: 400,\r\n        marginBottom: 15,\r\n        backgroundColor: '#f5deb3',\r\n        borderRadius: '1.5%',\r\n        padding: '-5%',\r\n\r\n\r\n    },\r\n    media: {\r\n        height: 50,\r\n        marginLeft: '5%',\r\n        borderRadius: '5%',\r\n        marginRight: '5%',\r\n        paddingTop: '56.25%', // 16:9\r\n    },\r\n    headerstyle: {\r\n\r\n        color: orange[800],\r\n\r\n    }\r\n\r\n\r\n}));\r\n\r\n\r\nexport default function Recipe({ title, calories, image, ingredients }) {\r\n\r\n    const classes = useStyles();\r\n\r\n\r\n    return (\r\n        <Card className={classes.root}>\r\n            <CardHeader\r\n                className={classes.headerstyle}\r\n                title={title}\r\n                subheader={'Calories: ' + Math.round(calories)}\r\n            />\r\n            <hr />\r\n            <CardMedia\r\n                className={classes.media}\r\n                image={image}\r\n                title={title}\r\n            />\r\n            <CardContent>\r\n\r\n                <Typography variant=\"subtitle2\" color=\"textPrimary\">\r\n                    <ol>\r\n                        {ingredients.map(ingredient => (\r\n                            <li key={Math.random()}>{ingredient.text}</li>\r\n                        ))}\r\n                    </ol>\r\n                </Typography>\r\n            </CardContent>\r\n\r\n\r\n        </Card>\r\n    )\r\n}\r\n","import logo from './logo.svg';\nimport './App.css';\nimport React, { useEffect, useState } from 'react';\nimport Recipe from './Recipe';\n\n\nimport { makeStyles } from '@material-ui/core/styles';\nimport TextField from '@material-ui/core/TextField';\nimport Button from '@material-ui/core/Button';\nimport { Grid } from '@material-ui/core';\n\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    '& > *': {\n      margin: theme.spacing(1),\n\n    },\n\n  },\n}));\n\nfunction App() {\n  const classes = useStyles();\n\n  const APP_ID = 'c59824c8';\n  const APP_KEY = '4cedcc900eb5943f613ed4a42166df6e\t';\n\n\n  const [recipes, setRecipes] = useState([]);\n  const [search, setSearch] = useState('');\n  const [query, setQuery] = useState('');\n\n  useEffect(() => {\n    getRecipes();\n  }, [query]);\n  const Request = `https://api.edamam.com/search?q=${query}&app_id=${APP_ID}&app_key=${APP_KEY}`;\n\n  const getRecipes = async () => {\n    const response = await fetch(Request);\n    const data = await response.json();\n    setRecipes(data.hits);\n\n  }\n\n  const updateSearch = e => {\n    setSearch(e.target.value);\n  }\n\n  const getSearch = (e) => {\n    e.preventDefault();\n    setQuery(search);\n    setSearch('');\n\n  }\n\n\n  return (\n    <Grid container direction=\"column\" className=\"App\">\n      <Grid container direction=\"column\" alignContent='center' alignItems=\"center\" justify=\"center\">\n        <form onSubmit={getSearch} className={classes.root}>\n          <Grid item>\n            <TextField\n              type=\"text\"\n              id=\"standard-basic\" label=\"Eat less & stay blessed...\"\n              value={search}\n              onChange={updateSearch}\n            />\n          </Grid>\n\n          <Grid item container alignContent='center' alignItems=\"center\" justify=\"center\" >\n            <Button variant=\"outlined\" type=\"submit\" color=\"primary\">\n              Search\n        </Button>\n          </Grid>\n\n\n\n        </form>\n      </Grid>\n\n      <Grid direction=\"row\" container justify=\"space-around\" spacing={1}>\n\n\n        {recipes.map(recipe => (\n          <Recipe\n            key={recipe.recipe.label}\n            title={recipe.recipe.label}\n            calories={recipe.recipe.calories}\n            image={recipe.recipe.image}\n            ingredients={recipe.recipe.ingredients}\n          />\n        ))}\n\n\n\n\n\n\n\n      </Grid>\n\n    </Grid>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}